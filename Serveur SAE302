import sys
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import socket
import mysql.connector
import datetime
from enum import Enum


class AuthenticationWindow(QDialog):
    """
    Fenêtre de connexion pour l'authentification des utilisateurs.
    Attributs:
    - username_label: QLabel pour l'étiquette d'identifiant.
    - username_input: QLineEdit pour la saisie de l'identifiant.
    - password_label: QLabel pour l'étiquette du mot de passe.
    - password_input: QLineEdit pour la saisie du mot de passe.
    - error_label: QLabel pour afficher les messages d'erreur.
    - login_button: QPushButton pour déclencher le processus d'authentification.
    Méthodes:
    - authenticate: Méthode appelée lors de l'appui sur le bouton de connexion,
                   vérifie les identifiants et accepte la connexion si corrects.
    """
    def __init__(self):
        super().__init__()

        self.layout = QVBoxLayout()

        self.username_label = QLabel("Identifiant:")
        self.layout.addWidget(self.username_label)

        self.username_input = QLineEdit()
        self.layout.addWidget(self.username_input)

        self.password_label = QLabel("Mot de passe:")
        self.layout.addWidget(self.password_label)

        self.password_input = QLineEdit()
        self.password_input.setEchoMode(QLineEdit.EchoMode.Password)
        self.layout.addWidget(self.password_input)

        self.error_label = QLabel()
        self.error_label.setStyleSheet("color: red")
        self.layout.addWidget(self.error_label)

        self.login_button = QPushButton("Se connecter", self)
        self.login_button.clicked.connect(self.authenticate)
        self.layout.addWidget(self.login_button)

        self.setLayout(self.layout)

    def authenticate(self):
        username = self.username_input.text()
        password = self.password_input.text()

        if username == "root" and password == "root":
            self.accept()
        else:
            self.error_label.setText("Identifiant ou mot de passe incorrect.")


class ClientHandler(QThread):
    """
    Gère la communication avec un client, traite les messages et gère les déconnexions.
    Attributs:
    - disconnected: Signal émis lorsqu'un client est déconnecté.
    Méthodes:
    - run: Méthode principale du thread, gère la réception de messages du client.
    - set_current_channel: Définit le canal actuel du client.
    - send_message: Envoie un message au client.
    - handle_client_message: Traite les messages reçus du client.
    - extract_username_and_content: Extrait l'expéditeur et le contenu d'un message.
    - is_user_banned: Vérifie si un utilisateur est banni.
    """
    disconnected = pyqtSignal(tuple)

    def __init__(self, client_socket, addr, server, username):
        super().__init__()
        self.client_socket = client_socket
        self.addr = addr
        self.server = server
        self.username = username
        self.current_channel = None

    def run(self):
        try:
            while True:
                data = self.client_socket.recv(1024)
                if not data:
                    break
                decoded_data = data.decode('utf-8')
                if decoded_data.lower() == "bye":
                    break

                self.server.handle_client_message(decoded_data, self.username, self)

        except Exception as e:
            print(f"Erreur de réception : {e}")
        finally:
            self.client_socket.close()
            self.disconnected.emit(self.addr)

    def set_current_channel(self, channel_id):
        self.current_channel = channel_id

    def send_message(self, message):
        try:
            self.client_socket.sendall(message.encode('utf-8'))
        except Exception as e:
            print(f"Erreur lors de l'envoi du message au client {self.addr}: {e}")

    def handle_client_message(self, message):
        sender_username, content = self.extract_username_and_content(message)

        if self.is_user_banned(sender_username):
            self.server.message_received.emit(f"{sender_username} est banni et ne peut pas envoyer de messages.")
            return

        if not content.lower().startswith("changement de canal"):
            current_channel_id = self.current_channel
            if current_channel_id is not None:
                content = content.strip()
                self.server.message_received.emit(f"{sender_username}: {content}")
                self.server.insert_message(sender_username, current_channel_id, content)
                self.server.broadcast_message(f"{sender_username}: {content}", self.addr)
        else:
            parts = content.split(":")
            if len(parts) >= 2:
                channel_name = parts[1].strip()
                channel_id = self.server.CHANNEL_IDS.get(channel_name)
                if channel_id is not None:
                    self.set_current_channel(channel_id)
                    self.server.message_received.emit(f"{sender_username}: Changement de canal : {channel_name}")
                    self.server.insert_message(sender_username, None, f"Changement de canal : {channel_name}")
                    self.server.broadcast_message(f"{sender_username}: Changement de canal : {channel_name}", self.addr)
                else:
                    self.server.message_received.emit(f"Canal non trouvé : {channel_name}")
            else:
                self.server.message_received.emit(f"Commande de changement de canal mal formée : {content}")

    def extract_username_and_content(self, message):
        parts = message.split(':')

        if len(parts) >= 2:
            sender_username = parts[0].strip()
            content = ':'.join(parts[1:]).strip()
            return sender_username, content

        return "", ""


    def is_user_banned(self, username):
        try:
            cursor = self.server.db_connection.cursor()
            cursor.execute("SELECT ban_expire FROM users WHERE username = %s", (username,))
            ban_expire = cursor.fetchone()[0]
            cursor.close()
            return ban_expire is not None and ban_expire > datetime.datetime.now()

        except Exception as e:
            return False

class ChannelStatus(Enum):
    """
    Enumération des statuts possibles d'un canal.
    """
    OPEN = "Ouvert"
    ON_REQUEST = "Sur demande"
    VALIDATION_REQUIRED = "Validation nécessaire"

class Server(QThread):
    """
    Gère la logique du serveur, l'authentification des utilisateurs, la communication,
    les demandes de canal et la gestion des utilisateurs.
    Attributs:
    - client_connected: Signal émis lorsqu'un client est connecté.
    - message_received: Signal émis lorsqu'un message est reçu.
    - new_user_created: Signal émis lorsqu'un nouvel utilisateur est créé.
    - channel_request_received: Signal émis lorsqu'une demande de canal est reçue.
    Méthodes:
    - run: Méthode principale du thread, gère les connexions entrantes.
    - authenticate: Authentifie un client en vérifiant ses identifiants.
    - handle_user_creation: Traite la création d'un nouvel utilisateur.
    - handle_user_authentication: Traite l'authentification d'un utilisateur existant.
    - stop_server: Arrête le serveur et ferme les connexions.
    - verify_credentials: Vérifie les identifiants d'un client.
    - handle_client_disconnected: Gère la déconnexion d'un client.
    - kick_user: Kick un utilisateur du serveur.
    - ban_user: Bannit un utilisateur du serveur.
    - unban_user: Annule le bannissement d'un utilisateur.
    - unkick_user: Annule le kick d'un utilisateur.
    - check_user_timeouts: Vérifie les délais d'expiration des kicks et bans.
    - reset_kick_expire: Réinitialise le délai d'expiration du kick.
    - reset_ban_expire: Réinitialise le délai d'expiration du ban.
    - handle_channel_request: Gère les demandes de canal des utilisateurs.
    - add_user_to_channel: Ajoute un utilisateur à un canal.
    - is_user_in_channel: Vérifie si un utilisateur est dans un canal.
    - insert_user_channel: Insère l'adhésion d'un utilisateur à un canal.
    - broadcast_channel_members: Diffuse la liste des membres d'un canal.
    - is_channel_request_valid: Vérifie si une demande de canal est valide.
    - is_approval_required_for_user: Vérifie si l'approbation est nécessaire pour un utilisateur.
    - get_channel_name: Obtient le nom d'un canal à partir de son identifiant.
    - validate_channel_request: Valide ou refuse une demande de canal.
    - is_user_waiting_for_approval: Vérifie si un utilisateur attend l'approbation pour un canal.
    - remove_user_from_approval_list: Retire un utilisateur de la liste des demandes en attente.
    """
    client_connected = pyqtSignal(tuple)
    message_received = pyqtSignal(str)
    new_user_created = pyqtSignal(str)
    channel_request_received = pyqtSignal(str, str)

    CHANNEL_IDS = {
        "Général": 1,
        "Blabla": 2,
        "Comptabilité": 3,
        "Informatique": 4,
        "Marketing": 5
    }

    def __init__(self):
        super().__init__()

        self.auth_window = AuthenticationWindow()
        if self.auth_window.exec() != QDialog.Accepted:
            sys.exit(0)

        self.db_connection = mysql.connector.connect(
            host="localhost",
            user="root",
            password="toto",
            database="SAE302"
        )
        print("BDD bien connecté")
        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server_socket.bind(('0.0.0.0', 5555))
        self.server_socket.listen()
        self.clients = []
        self.window = ServerWindow(self)
        self.window.stop_server_signal.connect(self.stop_server)
        self.window.show()
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.check_user_timeouts)
        self.timer.start(60000)
        self.channels_requests = {}

    def run(self):
        try:
            while True:
                client_socket, addr = self.server_socket.accept()
                self.client_connected.emit(addr)
                self.message_received.emit(f"Connexion acceptée de {addr[0]}:{addr[1]}")

                verified_username = self.verify_credentials(client_socket)
                if verified_username:
                    client_handler = ClientHandler(client_socket, addr, self, verified_username)
                    client_handler.set_current_channel(1)  # Spécifie le canal initial ici
                    client_handler.disconnected.connect(self.handle_client_disconnected)
                    client_handler.start()

                    self.clients.append((client_handler, addr))

                else:
                    self.window.text_edit.append(f"Identification échouée. Connexion refusée pour {addr[0]}:{addr[1]}")

        except Exception as e:
            print(f"Erreur de connexion : {e}")

    def authenticate(self, client_socket):
        try:
            data = client_socket.recv(1024)
            if not data:
                return False

            credentials = data.decode('utf-8').split(':')
            action = credentials[0]

            if action == "création_utilisateur":
                return self.handle_user_creation(client_socket, credentials)
            elif action == "connexion":
                return self.handle_user_authentication(client_socket, credentials)
            else:
                return False

        except Exception as e:
            return False

    def handle_user_creation(self, client_socket, credentials):
        try:
            username, pseudo, password = credentials[1], credentials[2], credentials[3]

            if self.insert_new_user(username, pseudo, password):
                self.new_user_created.emit(f"Nouvel utilisateur créé: {username}")
                return True
            else:
                return False

        except Exception as e:
            return False

    def handle_user_authentication(self, client_socket, credentials):
        try:
            username, password = credentials[1], credentials[2]

            cursor = self.db_connection.cursor()
            cursor.execute("SELECT * FROM users WHERE username = %s AND password = %s AND ban = 0",
                           (username, password))
            result = cursor.fetchone()
            cursor.close()

            if result:
                client_handler = ClientHandler(client_socket, None, self, username)
                client_handler.set_current_channel(1)  # Spécifie le canal initial ici
                client_handler.disconnected.connect(self.handle_client_disconnected)
                client_handler.start()
                self.clients.append((client_handler, None))
            else:
                print(f"Identifiants invalides pour {username}")

            return result is not None

        except Exception as e:
            return False

    def stop_server(self):
        self.window.set_status("Le serveur est arrêté.")
        self.window.text_edit.append("Le serveur a été arrêté.")
        self.server_socket.close()

        for client_handler, _ in self.clients:
            client_handler.client_socket.close()

        self.wait()

    def verify_credentials(self, client_socket):
        try:
            data = client_socket.recv(1024)
            if not data:
                return False

            credentials = data.decode('utf-8').split(':')
            if credentials[0] == "création_utilisateur":
                username, pseudo, password = credentials[1], credentials[2], credentials[3]

                if self.insert_new_user(username, pseudo, password):
                    self.new_user_created.emit(f"Nouvel utilisateur créé: {username}")
                    return True
                else:
                    return False
            else:
                username, password = credentials[0], credentials[1]

                cursor = self.db_connection.cursor()
                cursor.execute("SELECT * FROM users WHERE username = %s AND password = %s AND ban = 0",
                               (username, password))
                result = cursor.fetchone()
                cursor.close()

                if result:
                    return username
                else:
                    return None
                return result is not None

        except Exception as e:
            return False

    def insert_new_user(self, username, pseudo, password):
        try:
            cursor = self.db_connection.cursor()
            cursor.execute("INSERT INTO users (username, pseudo, password) VALUES (%s, %s, %s)",
                           (username, pseudo, password))
            self.db_connection.commit()
            cursor.close()
            return True
        except Exception as e:
            return False

    def handle_client_message(self, message, username, client_handler):
        sender_username, content = message.split(':', 1)
        sender_username = sender_username.strip()

        if "Demande de canal" in content:
            self.handle_channel_request(client_handler, sender_username, content)
            return

        if not message.lower().startswith("changement de canal"):
            current_channel_id = client_handler.current_channel
            if current_channel_id is not None:
                content = content.strip()
                self.message_received.emit(f"{sender_username}: {content}")
                self.insert_message(sender_username, current_channel_id, content)
                self.broadcast_message(f"{sender_username}: {content}", client_handler.addr)
        else:
            parts = message.split(":")
            if len(parts) >= 2:
                channel_name = parts[1].strip()
                channel_id = self.CHANNEL_IDS.get(channel_name)
                if channel_id is not None:
                    client_handler.set_current_channel(channel_id)
                    self.message_received.emit(f"{sender_username}: {message}")
                    self.insert_message(sender_username, None, message)
                    self.broadcast_message(f"{sender_username}: {message}", client_handler.addr)
                else:
                    self.message_received.emit(f"Canal non trouvé : {channel_name}")
            else:
                self.message_received.emit(f"Commande de changement de canal mal formée : {message}")

    def insert_message(self, username, channel_id, content):
        try:
            cursor = self.db_connection.cursor()
            cursor.execute("INSERT INTO messages (username, channel_id, content) VALUES (%s, %s, %s)",
                           (username, channel_id, content))
            self.db_connection.commit()
            cursor.close()
        except Exception as e:
            print(f"Erreur lors de l'insertion du message dans la base de données : {e}")

    def broadcast_message(self, message, sender_addr):
        # Exclure les messages "Changement de canal"
        if "Changement de canal" not in message:
            for client_handler, addr in self.clients:
                if addr != sender_addr:
                    try:
                        client_handler.client_socket.sendall(message.encode('utf-8'))
                    except Exception as e:
                        print(f"Erreur lors de l'envoi du message au client {addr}: {e}")

    def handle_client_disconnected(self, addr):
        for client_handler, client_addr in self.clients:
            if client_addr == addr:
                self.clients.remove((client_handler, client_addr))
                self.message_received.emit(f"Client déconnecté : {addr[0]}:{addr[1]}")
                self.window.text_edit.append(f"Client déconnecté : {addr[0]}:{addr[1]}")

    def kick_user(self, username, kick_expire):
        try:
            cursor = self.db_connection.cursor()
            cursor.execute("UPDATE users SET kick_expire = %s, ban = 1 WHERE username = %s", (kick_expire, username))
            self.db_connection.commit()
            cursor.close()
            self.broadcast_message(f"{username} a été kické jusqu'au {kick_expire}.", None)
        except Exception as e:
            print(f"Erreur lors du Kick de l'utilisateur {username} : {e}")

    def ban_user(self, username, ban_expire):
        try:
            cursor = self.db_connection.cursor()
            cursor.execute("UPDATE users SET ban_expire = %s, ban = 1 WHERE username = %s", (ban_expire, username))
            self.db_connection.commit()
            cursor.close()
            self.broadcast_message(f"{username} a été banni jusqu'au {ban_expire}.", None)
        except Exception as e:
            print(f"Erreur lors du Ban de l'utilisateur {username} : {e}")

    def unban_user(self, username):
        try:
            cursor = self.db_connection.cursor()
            cursor.execute("UPDATE users SET ban_expire = NULL, ban = 0 WHERE username = %s", (username,))
            self.db_connection.commit()
            cursor.close()
            self.broadcast_message(f"{username} n'est plus banni.", None)
        except Exception as e:
            print(f"Erreur lors de la suppression du Ban de l'utilisateur {username} : {e}")

    def unkick_user(self, username):
        try:
            cursor = self.db_connection.cursor()
            cursor.execute("UPDATE users SET kick_expire = NULL, ban = 0 WHERE username = %s", (username,))
            self.db_connection.commit()
            cursor.close()
            self.broadcast_message(f"{username} n'est plus kické.", None)
        except Exception as e:
            print(f"Erreur lors de la suppression du Kick de l'utilisateur {username} : {e}")

    def check_user_timeouts(self):
        try:
            cursor = self.db_connection.cursor(dictionary=True)
            cursor.execute("SELECT username, kick_expire, ban_expire FROM users WHERE kick_expire IS NOT NULL OR ban_expire IS NOT NULL")
            users = cursor.fetchall()
            cursor.close()

            current_datetime = datetime.datetime.now()

            for user in users:
                username = user["username"]
                kick_expire = user["kick_expire"]
                ban_expire = user["ban_expire"]

                if kick_expire is not None and kick_expire < current_datetime:
                    self.reset_kick_expire(username)

                if ban_expire is not None and ban_expire < current_datetime:
                    self.reset_ban_expire(username)

        except Exception as e:
            print(f"Erreur lors de la vérification des délais d'expiration : {e}")

    def reset_kick_expire(self, username):
        try:
            cursor = self.db_connection.cursor()
            cursor.execute("UPDATE users SET kick_expire = NULL, ban = 0 WHERE username = %s", (username,))
            self.db_connection.commit()
            cursor.close()
        except Exception as e:
            print(f"Erreur lors de la suppression du Kick de l'utilisateur {username} : {e}")

    def reset_ban_expire(self, username):
        try:
            cursor = self.db_connection.cursor()
            cursor.execute("UPDATE users SET ban_expire = NULL, ban = 0 WHERE username = %s", (username,))
            self.db_connection.commit()
            cursor.close()
        except Exception as e:
            print(f"Erreur lors de la suppression du Ban de l'utilisateur {username} : {e}")

    def handle_channel_request(self, client_handler, sender_username, request_message):
        parts = request_message.split(":")
        if len(parts) >= 2:
            channel_name = parts[1].strip()
            channel_id = self.CHANNEL_IDS.get(channel_name)
            if channel_id is not None:
                if self.is_user_in_channel(sender_username, channel_id):
                    self.message_received.emit(f"Membre du salon {channel_id} : {sender_username}")
                else:
                    if self.is_channel_request_valid(channel_id, client_handler):
                        # Émettre le signal pour demander l'affichage de la fenêtre pop-up
                        self.channel_request_received.emit(
                            sender_username, channel_name)
                    else:
                        if channel_id not in self.channels_requests:
                            self.channels_requests[channel_id] = set()

                        self.channels_requests[channel_id].add(sender_username)
                        self.message_received.emit(
                            f"Demande de salon en attente d'approbation pour {sender_username} : {channel_name}")
            else:
                self.message_received.emit(f"Canal non trouvé : {channel_name}")
        else:
            self.message_received.emit(
                f"Commande de demande de salon mal formée : {request_message}")

    def add_user_to_channel(self, username, channel_id):
        try:
            # Vérifier si l'utilisateur est déjà dans le canal
            if not self.is_user_in_channel(username, channel_id):
                # Si l'utilisateur n'est pas dans le canal, ajouter à la table
                cursor = self.db_connection.cursor()
                cursor.execute("INSERT INTO user_channels (username, channel_id) VALUES (%s, %s)",
                               (username, channel_id))
                self.db_connection.commit()
                cursor.close()

        except Exception as e:
            print(f"Erreur lors de l'ajout de l'utilisateur au canal dans la base de données : {e}")

    def is_user_in_channel(self, username, channel_id):
        try:
            cursor = self.db_connection.cursor()
            cursor.execute("SELECT COUNT(*) FROM user_channels WHERE username = %s AND channel_id = %s",
                           (username, channel_id))
            result = cursor.fetchone()[0]
            cursor.close()

            return result > 0

        except Exception as e:
            return False
    def insert_user_channel(self, username, channel_id):
        try:
            cursor = self.db_connection.cursor()
            cursor.execute("INSERT INTO user_channels (username, channel_id) VALUES (%s, %s)", (username, channel_id))
            self.db_connection.commit()
            cursor.close()
        except Exception as e:
            print(f"Erreur lors de l'insertion de l'adhésion dans la base de données : {e}")

    def broadcast_channel_members(self, channel_id):
        try:
            cursor = self.db_connection.cursor(dictionary=True)
            cursor.execute("SELECT username FROM user_channels WHERE channel_id = %s", (channel_id,))
            members = cursor.fetchall()
            cursor.close()

            member_names = [member["username"] for member in members]
            member_list = ", ".join(member_names)

            self.message_received.emit(f"Membres du salon {channel_id} : {member_list}")

        except Exception as e:
            print(f"Erreur lors de la diffusion des membres du salon : {e}")

    def is_channel_request_valid(self, channel_id, client_handler):
        channels_requiring_approval = {"Comptabilité", "Informatique", "Marketing"}

        if channel_id in self.CHANNEL_IDS.values() and self.get_channel_name(channel_id) in channels_requiring_approval:
            return self.is_approval_required_for_user(channel_id, client_handler.username)
        else:
            return True

    def is_approval_required_for_user(self, channel_id, username):
        try:
            cursor = self.db_connection.cursor()
            cursor.execute("SELECT COUNT(*) FROM user_channels WHERE username = %s AND channel_id = %s",
                           (username, channel_id))
            result = cursor.fetchone()[0]
            cursor.close()

            return result == 0

        except Exception as e:
            return False

    def get_channel_name(self, channel_id):
        for name, cid in self.CHANNEL_IDS.items():
            if cid == channel_id:
                return name
        return None

    def validate_channel_request(self, username, channel_id, approve):
        if channel_id in self.channels_requests and username in self.channels_requests[channel_id]:
            self.channels_requests[channel_id].remove(username)
            if approve:
                self.insert_user_channel(username, channel_id)
                self.message_received.emit(f"Demande d'adhésion approuvée : {username} rejoint le salon {channel_id}.")
            else:
                self.message_received.emit(f"Demande d'adhésion refusée : {username} pour le salon {channel_id}.")

    def is_user_waiting_for_approval(self, channel_id, username):
        return channel_id in self.channels_requests and username in self.channels_requests[channel_id]

    def remove_user_from_approval_list(self, channel_id, username):
        if channel_id in self.channels_requests and username in self.channels_requests[channel_id]:
            self.channels_requests[channel_id].remove(username)

class ChannelRequestDialog(QDialog):
    """
    Initialise une boîte de dialogue pour gérer les demandes d'adhésion à un canal.

    :param sender_username: Le nom d'utilisateur de l'expéditeur de la demande.
    :param channel_name: Le nom du canal pour lequel la demande est faite.
    :param accept_callback: La fonction de rappel à appeler lors de l'acceptation de la demande.
    :param parent: Le widget parent de la boîte de dialogue (facultatif).
    """

    def __init__(self, sender_username, channel_name, accept_callback, parent=None):
        super().__init__(parent)

        self.setWindowTitle("Demande de Salon")
        self.setGeometry(300, 300, 300, 150)

        layout = QVBoxLayout()

        label = QLabel(f"{sender_username} a demandé à rejoindre le salon {channel_name}.")
        layout.addWidget(label)

        accept_button = QPushButton("Accepter", self)
        accept_button.clicked.connect(lambda: self.accept_and_close(accept_callback, sender_username, channel_name))
        layout.addWidget(accept_button)

        refuse_button = QPushButton("Refuser", self)
        refuse_button.clicked.connect(self.reject)
        layout.addWidget(refuse_button)

        self.setLayout(layout)

    def accept_and_close(self, accept_callback, sender_username, channel_name):
        """
        Appelle la fonction de rappel d'acceptation et ferme la boîte de dialogue.

        :param accept_callback: La fonction de rappel à appeler.
        :param sender_username: Le nom d'utilisateur de l'expéditeur de la demande.
        :param channel_name: Le nom du canal pour lequel la demande est faite.
        """
        accept_callback(sender_username, channel_name)
        self.accept()

class ServerWindow(QMainWindow):
    """
    Initialise la fenêtre principale du serveur.

    :param server: L'instance du serveur associée à la fenêtre.
    """

    stop_server_signal = pyqtSignal()

    def __init__(self, server):
        super().__init__()

        self.server = server

        self.setWindowTitle("Serveur")
        self.setGeometry(100, 100, 600, 400)

        self.central_widget = QWidget(self)
        self.setCentralWidget(self.central_widget)

        self.layout = QVBoxLayout()

        self.text_edit = QTextEdit(self)
        self.layout.addWidget(self.text_edit)

        self.input_line = QLineEdit(self)
        self.layout.addWidget(self.input_line)

        self.send_button = QPushButton("Envoyer", self)
        self.send_button.clicked.connect(self.send_message)
        self.layout.addWidget(self.send_button)

        self.stop_button = QPushButton("Arrêter le serveur", self)
        self.stop_button.clicked.connect(self.stop_server)
        self.layout.addWidget(self.stop_button)

        self.central_widget.setLayout(self.layout)

        self.setup_ui()

        self.server.message_received.connect(self.handle_message_received)
        self.server.client_connected.connect(self.handle_client_connected)
        self.server.new_user_created.connect(self.handle_new_user_created)

        self.kick_button = QPushButton("Kick", self)
        self.kick_button.clicked.connect(self.kick_user)
        self.layout.addWidget(self.kick_button)

        self.ban_button = QPushButton("Ban", self)
        self.ban_button.clicked.connect(self.ban_user)
        self.layout.addWidget(self.ban_button)

        self.unban_button = QPushButton("Supprimer le Ban", self)
        self.unban_button.clicked.connect(self.unban_user)
        self.layout.addWidget(self.unban_button)

        self.unkick_button = QPushButton("Enlever le Kick", self)
        self.unkick_button.clicked.connect(self.unkick_user)
        self.layout.addWidget(self.unkick_button)

        self.kick_button = QPushButton("Pour Kick", self)
        self.layout.addWidget(self.kick_button)

        self.kick_datetime_edit = QDateTimeEdit(self)
        self.layout.addWidget(self.kick_datetime_edit)

        self.ban_button = QPushButton("Pour Ban", self)
        self.layout.addWidget(self.ban_button)

        self.ban_datetime_edit = QDateTimeEdit(self)
        self.layout.addWidget(self.ban_datetime_edit)

        server.channel_request_received.connect(self.show_channel_request_dialog)

        self.server.start()

    def stop_server(self):
        """
        Émet le signal pour arrêter le serveur.
        """
        self.stop_server_signal.emit()

    def send_message(self):
        """
        Envoie un message du serveur.
        """
        self.server.broadcast_message(f"Server: {self.input_line.text()}", None)
        self.input_line.clear()

    def handle_message_received(self, message):
        """
        Gère la réception d'un message et l'affiche dans la fenêtre.

        :param message: Le message reçu.
        """
        self.text_edit.append(message)

    def handle_client_connected(self, addr):
        """
        Gère la connexion d'un client et affiche l'adresse dans la fenêtre.

        :param addr: L'adresse du client connecté.
        """
        self.text_edit.append(f"Client connecté : {addr[0]}:{addr[1]}")

    def handle_new_user_created(self, message):
        """
        Gère la création d'un nouvel utilisateur et affiche un message dans la fenêtre.

        :param message: Le message de création d'utilisateur.
        """
        print("Handling new user creation:", message)
        self.text_edit.append(message)

    def kick_user(self):
        """
        Expulse un utilisateur du serveur.
        """
        username = self.get_selected_username()
        if username:
            kick_expire = self.kick_datetime_edit.dateTime().toPyDateTime()
            self.server.kick_user(username, kick_expire)

    def ban_user(self):
        """
        Bannit un utilisateur du serveur.
        """
        username = self.get_selected_username()
        if username:
            ban_expire = self.ban_datetime_edit.dateTime().toPyDateTime()
            self.server.ban_user(username, ban_expire)

    def unban_user(self):
        """
        Supprime le bannissement d'un utilisateur.
        """
        username = self.get_selected_username()
        if username:
            self.server.unban_user(username)

    def unkick_user(self):
        """
        Annule l'expulsion d'un utilisateur.
        """
        username = self.get_selected_username()
        if username:
            self.server.unkick_user(username)

    def get_selected_username(self):
        """
        Récupère le nom d'utilisateur sélectionné dans le menu déroulant.

        :return: Le nom d'utilisateur sélectionné ou None si aucun n'est sélectionné.
        """
        index = self.user_combo.currentIndex()
        if index > 0:
            return self.user_combo.currentText()
        return None

    def setup_ui(self):
        """
        Configure l'interface utilisateur en ajoutant un menu déroulant pour les utilisateurs.
        """
        self.user_combo = QComboBox(self)
        self.layout.addWidget(self.user_combo)

        self.load_users()

    def load_users(self):
        """
        Charge les utilisateurs depuis la base de données et les ajoute au menu déroulant.
        """
        try:
            cursor = self.server.db_connection.cursor(dictionary=True)
            cursor.execute("SELECT username FROM users")
            users = cursor.fetchall()
            cursor.close()

            self.user_combo.addItem("Sélectionner un utilisateur")
            for user in users:
                self.user_combo.addItem(user["username"])

        except Exception as e:
            print(f"Erreur lors du chargement des utilisateurs : {e}")

    def show_channel_request_dialog(self, sender_username, channel_name):
        """
        Affiche la boîte de dialogue de demande de canal.

        :param sender_username: Le nom d'utilisateur de l'expéditeur de la demande.
        :param channel_name: Le nom du canal pour lequel la demande est faite.
        """
        try:
            dialog = ChannelRequestDialog(sender_username, channel_name, self.accept_channel_request)
            result = dialog.exec_()
        except Exception as e:
            print(f"Erreur lors de l'affichage de la fenêtre pop-up : {e}")
        finally:
            if 'dialog' in locals():
                dialog.close()

    def accept_channel_request(self, sender_username, channel_name):
        """
        Accepte la demande de canal et met à jour le serveur en conséquence.

        :param sender_username: Le nom d'utilisateur de l'expéditeur de la demande.
        :param channel_name: Le nom du canal pour lequel la demande est faite.
        """
        channel_id = self.server.CHANNEL_IDS.get(channel_name)

        if channel_id is not None:
            self.server.add_user_to_channel(sender_username, channel_id)
            self.server.message_received.emit(
                f"Demande d'adhésion approuvée : {sender_username} rejoint le salon {channel_name}.")
            self.server.broadcast_channel_members(channel_id)
        else:
            self.server.message_received.emit(f"Canal non trouvé : {channel_name}")

if __name__ == '__main__':
    app = QApplication(sys.argv)
    server = Server()
    window = ServerWindow(server)
    sys.exit(app.exec_())
